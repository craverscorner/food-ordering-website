{"version":3,"file":"static/js/538.e892203f.chunk.js","mappings":"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","sources":["pages/MenuManager.js","pages/AdminOrders.js","pages/CategoryManager.js","pages/CouponManager.js","pages/AdminDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box, Typography, Alert, Button, TextField, Paper, Table, TableBody, TableCell,\r\n  TableContainer, TableHead, TableRow, IconButton, Dialog, DialogTitle, DialogContent,\r\n  DialogContentText, DialogActions, Stack, CircularProgress, Select, MenuItem, FormControl, InputLabel\r\n} from '@mui/material';\r\nimport { supabase } from '../supabaseClient';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { useMenu } from '../context/MenuContext';\r\n\r\nconst emptyItem = { name: '', description: '', price: '', image_url: '', category_ids: [], subcategory_ids: [] };\r\n\r\nfunction MenuManager() {\r\n  const [items, setItems] = useState([]);\r\n  const [form, setForm] = useState(emptyItem);\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [deleteId, setDeleteId] = useState(null);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [categories, setCategories] = useState([]);\r\n  const [subcategories, setSubcategories] = useState([]);\r\n  const [subcategoryLinks, setSubcategoryLinks] = useState({});\r\n  const [categoryLinks, setCategoryLinks] = useState({});\r\n  const { categorySubcategoryLinks } = useMenu();\r\n\r\n  const fetchItems = async () => {\r\n    const { data, error: fetchError } = await supabase.from('menu_items').select('*');\r\n    if (fetchError) setError(fetchError.message);\r\n    else setItems(data);\r\n  };\r\n\r\n  const fetchCategories = async () => {\r\n    const { data, error: fetchError } = await supabase.from('categories').select('*');\r\n    if (!fetchError && data) {\r\n      setCategories(data.filter(c => c.type === 'category'));\r\n      setSubcategories(data.filter(c => c.type === 'subcategory'));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchItems();\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchLinks = async () => {\r\n      // Fetch subcategory links\r\n      const { data: subcatData } = await supabase.from('menu_item_subcategories').select('*');\r\n      const subLinks = {};\r\n      subcatData?.forEach(link => {\r\n        if (!subLinks[link.menu_item_id]) subLinks[link.menu_item_id] = [];\r\n        subLinks[link.menu_item_id].push(link.subcategory_id);\r\n      });\r\n      setSubcategoryLinks(subLinks);\r\n\r\n      // Fetch category links\r\n      const { data: catData } = await supabase.from('menu_item_categories').select('*');\r\n      const catLinks = {};\r\n      catData?.forEach(link => {\r\n        if (!catLinks[link.menu_item_id]) catLinks[link.menu_item_id] = [];\r\n        catLinks[link.menu_item_id].push(link.category_id);\r\n      });\r\n      setCategoryLinks(catLinks);\r\n    };\r\n    fetchLinks();\r\n  }, [items]);\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    if (name === 'subcategory_ids' || name === 'category_ids') {\r\n      setForm({ ...form, [name]: typeof value === 'string' ? value.split(',') : value });\r\n    } else {\r\n      setForm({ ...form, [name]: value });\r\n    }\r\n  };\r\n\r\n  const handleImageUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) return;\r\n    setUploading(true);\r\n    try {\r\n      const fileExt = file.name.split('.').pop();\r\n      const fileName = `${Math.random()}.${fileExt}`;\r\n      const { data, error: uploadError } = await supabase.storage\r\n        .from('menu-images')\r\n        .upload(fileName, file);\r\n      if (uploadError) throw uploadError;\r\n      const { data: { publicUrl } } = supabase.storage\r\n        .from('menu-images')\r\n        .getPublicUrl(data.path);\r\n      setForm({ ...form, image_url: publicUrl });\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setSuccess('');\r\n    if (!form.name || !form.price || !form.category_ids.length) {\r\n      setError('Name, price, and at least one category are required.');\r\n      return;\r\n    }\r\n    let menuItemId = editingId;\r\n    if (editingId) {\r\n      const { error } = await supabase.from('menu_items').update({\r\n        name: form.name,\r\n        description: form.description,\r\n        price: parseFloat(form.price),\r\n        image_url: form.image_url\r\n      }).eq('id', editingId);\r\n      if (error) { setError(error.message); return; }\r\n    } else {\r\n      const { data, error } = await supabase.from('menu_items').insert([\r\n        { name: form.name, description: form.description, price: parseFloat(form.price), image_url: form.image_url }\r\n      ]).select();\r\n      if (error) { setError(error.message); return; }\r\n      menuItemId = data[0].id;\r\n    }\r\n\r\n    // Handle categories\r\n    if (editingId) {\r\n      // Remove old category links\r\n      await supabase.from('menu_item_categories').delete().eq('menu_item_id', editingId);\r\n    }\r\n    // Insert new category links\r\n    if (form.category_ids.length > 0) {\r\n      const categoryInserts = form.category_ids.map(catId => ({\r\n        menu_item_id: menuItemId,\r\n        category_id: parseInt(catId)\r\n      }));\r\n      const { error: catError } = await supabase.from('menu_item_categories').insert(categoryInserts);\r\n      if (catError) { setError(catError.message); return; }\r\n    }\r\n\r\n    // Handle subcategories\r\n    if (editingId) {\r\n      await supabase.from('menu_item_subcategories').delete().eq('menu_item_id', editingId);\r\n    }\r\n    if (form.subcategory_ids && form.subcategory_ids.length > 0) {\r\n      const subcategoryInserts = form.subcategory_ids.map(subId => ({\r\n        menu_item_id: menuItemId,\r\n        subcategory_id: parseInt(subId)\r\n      }));\r\n      const { error: subError } = await supabase.from('menu_item_subcategories').insert(subcategoryInserts);\r\n      if (subError) { setError(subError.message); return; }\r\n    }\r\n\r\n    setSuccess(editingId ? 'Item updated!' : 'Item added!');\r\n    setEditingId(null);\r\n    setForm(emptyItem);\r\n    fetchItems();\r\n  };\r\n\r\n  const handleEdit = async item => {\r\n    setEditingId(item.id);\r\n    // Fetch categories and subcategories for this item\r\n    const { data: catLinks } = await supabase.from('menu_item_categories').select('category_id').eq('menu_item_id', item.id);\r\n    const { data: subcatLinks } = await supabase.from('menu_item_subcategories').select('subcategory_id').eq('menu_item_id', item.id);\r\n    \r\n    setForm({\r\n      name: item.name,\r\n      description: item.description,\r\n      price: item.price,\r\n      image_url: item.image_url,\r\n      category_ids: catLinks ? catLinks.map(link => link.category_id) : [],\r\n      subcategory_ids: subcatLinks ? subcatLinks.map(link => link.subcategory_id) : []\r\n    });\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (!deleteId) return;\r\n    const { error: deleteError } = await supabase.from('menu_items').delete().eq('id', deleteId);\r\n    if (deleteError) setError(deleteError.message);\r\n    else {\r\n      setSuccess('Item deleted!');\r\n      fetchItems();\r\n    }\r\n    setDeleteId(null);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setEditingId(null);\r\n    setForm(emptyItem);\r\n    setError('');\r\n    setSuccess('');\r\n  };\r\n\r\n  // Filter subcategories based on selected categories using join table\r\n  const availableSubcategories = subcategories.filter(sub =>\r\n    categorySubcategoryLinks.some(link =>\r\n      form.category_ids.includes(link.category_id) && link.subcategory_id === sub.id\r\n    )\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ mt: 4 }}>\r\n      <Typography variant=\"h5\" gutterBottom>Menu Management</Typography>\r\n      {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\r\n      {success && <Alert severity=\"success\" sx={{ mb: 2 }}>{success}</Alert>}\r\n      <Paper sx={{ p: 2, mb: 4 }}>\r\n        <form onSubmit={handleSubmit}>\r\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems=\"center\">\r\n            <TextField\r\n              name=\"name\"\r\n              label=\"Item Name\"\r\n              value={form.name}\r\n              onChange={handleChange}\r\n              required\r\n              size=\"small\"\r\n            />\r\n            <TextField\r\n              name=\"description\"\r\n              label=\"Description\"\r\n              value={form.description}\r\n              onChange={handleChange}\r\n              size=\"small\"\r\n            />\r\n            <TextField\r\n              name=\"price\"\r\n              label=\"Price\"\r\n              type=\"number\"\r\n              value={form.price}\r\n              onChange={handleChange}\r\n              required\r\n              size=\"small\"\r\n              inputProps={{ step: \"0.01\" }}\r\n            />\r\n            <input\r\n              accept=\"image/*\"\r\n              type=\"file\"\r\n              id=\"image-upload\"\r\n              onChange={handleImageUpload}\r\n              style={{ display: 'none' }}\r\n            />\r\n            <label htmlFor=\"image-upload\">\r\n              <Button variant=\"outlined\" component=\"span\" disabled={uploading}>\r\n                {uploading ? <CircularProgress size={24} /> : 'Upload Image'}\r\n              </Button>\r\n            </label>\r\n            {form.image_url && (\r\n              <Box sx={{ width: 100, height: 100, overflow: 'hidden' }}>\r\n                <img src={form.image_url} alt=\"Preview\" style={{ width: '100%', height: '100%', objectFit: 'cover' }} />\r\n              </Box>\r\n            )}\r\n            <FormControl size=\"small\" sx={{ minWidth: 120 }} required>\r\n              <InputLabel>Categories</InputLabel>\r\n              <Select\r\n                name=\"category_ids\"\r\n                multiple\r\n                value={form.category_ids}\r\n                label=\"Categories\"\r\n                onChange={handleChange}\r\n                renderValue={selected => selected.map(id => categories.find(cat => cat.id === id)?.name).join(', ')}\r\n              >\r\n                {categories.map(cat => (\r\n                  <MenuItem key={cat.id} value={cat.id}>{cat.name}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            {form.category_ids.length > 0 && availableSubcategories.length > 0 && (\r\n              <FormControl size=\"small\" sx={{ minWidth: 120 }}>\r\n                <InputLabel>Subcategories</InputLabel>\r\n                <Select\r\n                  name=\"subcategory_ids\"\r\n                  multiple\r\n                  value={form.subcategory_ids}\r\n                  label=\"Subcategories\"\r\n                  onChange={handleChange}\r\n                  renderValue={selected => selected.map(id => availableSubcategories.find(sub => sub.id === id)?.name).join(', ')}\r\n                >\r\n                  {availableSubcategories.map(sub => (\r\n                    <MenuItem key={sub.id} value={sub.id}>{sub.name}</MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            )}\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              {editingId ? 'Update' : 'Add'}\r\n            </Button>\r\n            {editingId && (\r\n              <Button type=\"button\" variant=\"outlined\" color=\"secondary\" onClick={handleCancel}>\r\n                Cancel\r\n              </Button>\r\n            )}\r\n          </Stack>\r\n        </form>\r\n      </Paper>\r\n      \r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell><b>Name</b></TableCell>\r\n              <TableCell><b>Description</b></TableCell>\r\n              <TableCell><b>Price</b></TableCell>\r\n              <TableCell><b>Categories</b></TableCell>\r\n              <TableCell><b>Subcategories</b></TableCell>\r\n              <TableCell><b>Actions</b></TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {items.map(item => (\r\n              <TableRow key={item.id}>\r\n                <TableCell>{item.name}</TableCell>\r\n                <TableCell>{item.description}</TableCell>\r\n                <TableCell>\r\n                  {item.price?.toLocaleString('en-GB', { style: 'currency', currency: 'GBP' })}\r\n                </TableCell>\r\n                <TableCell>\r\n                  {\r\n                    (() => {\r\n                      const catLinks = categoryLinks[item.id] || [];\r\n                      return catLinks.map(catId => categories.find(cat => cat.id === catId)?.name).filter(Boolean).join(', ');\r\n                    })()\r\n                  }\r\n                </TableCell>\r\n                <TableCell>\r\n                  {\r\n                    (() => {\r\n                      const subLinks = subcategoryLinks[item.id] || [];\r\n                      return subLinks.map(subId => subcategories.find(sub => sub.id === subId)?.name).filter(Boolean).join(', ');\r\n                    })()\r\n                  }\r\n                </TableCell>\r\n                <TableCell>\r\n                  <IconButton color=\"primary\" onClick={() => handleEdit(item)}><EditIcon /></IconButton>\r\n                  <IconButton color=\"error\" onClick={() => setDeleteId(item.id)}><DeleteIcon /></IconButton>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <Dialog open={!!deleteId} onClose={() => setDeleteId(null)}>\r\n        <DialogTitle>Delete Menu Item</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Are you sure you want to delete this menu item? This action cannot be undone.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setDeleteId(null)}>Cancel</Button>\r\n          <Button onClick={handleDelete} color=\"error\">Delete</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default MenuManager; ","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Chip,\r\n  IconButton,\r\n  Box,\r\n  CircularProgress,\r\n  Alert,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from '@mui/material';\r\nimport { supabase } from '../supabaseClient';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\nconst AdminOrders = () => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedOrder, setSelectedOrder] = useState(null);\r\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\r\n\r\n  const fetchOrders = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Fetch orders\r\n      const { data: ordersData, error: ordersError } = await supabase\r\n        .from('orders')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n      if (ordersError) throw ordersError;\r\n\r\n      // Fetch all profiles\r\n      const { data: profilesData, error: profilesError } = await supabase\r\n        .from('profiles')\r\n        .select('id, email');\r\n      if (profilesError) throw profilesError;\r\n\r\n      // Join orders with profiles in the frontend\r\n      const ordersWithProfiles = ordersData.map(order => ({\r\n        ...order,\r\n        profiles: profilesData.find(profile => profile.id === order.user_id)\r\n      }));\r\n\r\n      setOrders(ordersWithProfiles);\r\n    } catch (err) {\r\n      console.error('Error fetching orders:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchOrders();\r\n  }, []);\r\n\r\n  const updateOrderStatus = async (orderId, newStatus) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('orders')\r\n        .update({ status: newStatus })\r\n        .eq('id', orderId);\r\n\r\n      if (error) throw error;\r\n      fetchOrders(); // Refresh orders after update\r\n    } catch (err) {\r\n      console.error('Error updating order:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'completed':\r\n        return 'success';\r\n      case 'cancelled':\r\n        return 'error';\r\n      case 'processing':\r\n        return 'warning';\r\n      default:\r\n        return 'default';\r\n    }\r\n  };\r\n\r\n  const handleViewOrder = (order) => {\r\n    setSelectedOrder(order);\r\n    setViewDialogOpen(true);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n        <Typography variant=\"h4\" component=\"h1\">\r\n          Order Management\r\n        </Typography>\r\n        <IconButton onClick={fetchOrders} color=\"primary\">\r\n          <RefreshIcon />\r\n        </IconButton>\r\n      </Box>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Order ID</TableCell>\r\n              <TableCell>Customer</TableCell>\r\n              <TableCell>Total</TableCell>\r\n              <TableCell>Status</TableCell>\r\n              <TableCell>Date</TableCell>\r\n              <TableCell>Actions</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {orders.map((order) => (\r\n              <TableRow key={order.id}>\r\n                <TableCell>{order.id}</TableCell>\r\n                <TableCell>\r\n                  {order.profiles?.email || 'Guest'}\r\n                </TableCell>\r\n                <TableCell>\r\n                  {order.total?.toLocaleString('en-GB', { style: 'currency', currency: 'GBP' })}\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Chip\r\n                    label={order.status}\r\n                    color={getStatusColor(order.status)}\r\n                    size=\"small\"\r\n                  />\r\n                </TableCell>\r\n                <TableCell>\r\n                  {new Date(order.created_at).toLocaleString()}\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Box sx={{ display: 'flex', gap: 1 }}>\r\n                    <IconButton\r\n                      color=\"primary\"\r\n                      onClick={() => handleViewOrder(order)}\r\n                      size=\"small\"\r\n                    >\r\n                      <VisibilityIcon />\r\n                    </IconButton>\r\n                    {order.status === 'processing' && (\r\n                      <>\r\n                        <IconButton\r\n                          color=\"success\"\r\n                          onClick={() => updateOrderStatus(order.id, 'completed')}\r\n                          size=\"small\"\r\n                        >\r\n                          <CheckCircleIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                          color=\"error\"\r\n                          onClick={() => updateOrderStatus(order.id, 'cancelled')}\r\n                          size=\"small\"\r\n                        >\r\n                          <CancelIcon />\r\n                        </IconButton>\r\n                      </>\r\n                    )}\r\n                  </Box>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      {/* Order Details Dialog */}\r\n      <Dialog\r\n        open={viewDialogOpen}\r\n        onClose={() => setViewDialogOpen(false)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Order Details</DialogTitle>\r\n        <DialogContent>\r\n          {selectedOrder && (\r\n            <Box sx={{ mt: 2 }}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Order ID: {selectedOrder.id}\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Customer: {selectedOrder.profiles?.email || 'Guest'}\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Date: {new Date(selectedOrder.created_at).toLocaleString()}\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Status: {selectedOrder.status}\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Total: {selectedOrder.total?.toLocaleString('en-GB', { style: 'currency', currency: 'GBP' })}\r\n              </Typography>\r\n              <Typography variant=\"h6\" sx={{ mt: 2, mb: 1 }}>\r\n                Items:\r\n              </Typography>\r\n              <TableContainer>\r\n                <Table size=\"small\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Item</TableCell>\r\n                      <TableCell>Quantity</TableCell>\r\n                      <TableCell>Price</TableCell>\r\n                      <TableCell>Subtotal</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {selectedOrder.items.map((item, index) => (\r\n                      <TableRow key={index}>\r\n                        <TableCell>{item.name}</TableCell>\r\n                        <TableCell>{item.quantity}</TableCell>\r\n                        <TableCell>\r\n                          {item.price?.toLocaleString('en-GB', { style: 'currency', currency: 'GBP' })}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {(item.price * item.quantity)?.toLocaleString('en-GB', { style: 'currency', currency: 'GBP' })}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Box>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setViewDialogOpen(false)}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AdminOrders; ","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box, Typography, Alert, Button, TextField, Paper, Table, TableBody, TableCell,\r\n  TableContainer, TableHead, TableRow, IconButton, Dialog, DialogTitle, DialogContent,\r\n  DialogContentText, DialogActions, Stack, Select, MenuItem, InputLabel, FormControl\r\n} from '@mui/material';\r\nimport { supabase } from '../supabaseClient';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\nconst emptyCategory = { name: '', type: 'category' };\r\nconst emptySubcategory = { name: '', parent_category_ids: [], type: 'subcategory', sort_order: 0 };\r\n\r\nfunction CategoryManager() {\r\n  const [categories, setCategories] = useState([]);\r\n  const [subcategories, setSubcategories] = useState([]);\r\n  const [form, setForm] = useState(emptyCategory);\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [deleteId, setDeleteId] = useState(null);\r\n  const [isSubcategory, setIsSubcategory] = useState(false);\r\n  const [categorySubcategoryLinks, setCategorySubcategoryLinks] = useState([]);\r\n\r\n  const fetchCategories = async () => {\r\n    const { data, error } = await supabase.from('categories').select('*').eq('type', 'category');\r\n    if (error) setError(error.message);\r\n    else setCategories(data);\r\n  };\r\n\r\n  const fetchSubcategories = async () => {\r\n    const { data, error } = await supabase.from('categories').select('*').eq('type', 'subcategory');\r\n    if (error) setError(error.message);\r\n    else setSubcategories(data);\r\n  };\r\n\r\n  const fetchCategorySubcategoryLinks = async () => {\r\n    const { data, error } = await supabase.from('category_subcategory_links').select('*');\r\n    if (!error) setCategorySubcategoryLinks(data || []);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCategories();\r\n    fetchSubcategories();\r\n    fetchCategorySubcategoryLinks();\r\n  }, []);\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    if (name === 'parent_category_ids') {\r\n      setForm({ ...form, parent_category_ids: typeof value === 'string' ? value.split(',') : value });\r\n    } else {\r\n      setForm({ ...form, [name]: value });\r\n    }\r\n  };\r\n\r\n  const handleSortOrderChange = async (subcategoryId, newOrder) => {\r\n    await supabase\r\n      .from('categories')\r\n      .update({ sort_order: Number(newOrder) })\r\n      .eq('id', subcategoryId);\r\n    fetchSubcategories();\r\n  };\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setSuccess('');\r\n    if (!form.name) {\r\n      setError('Name is required.');\r\n      return;\r\n    }\r\n    let subcategoryId = editingId;\r\n    if (isSubcategory) {\r\n      if (editingId) {\r\n        const { error } = await supabase.from('categories').update({\r\n          name: form.name,\r\n          type: 'subcategory',\r\n          sort_order: form.sort_order ?? 0\r\n        }).eq('id', editingId);\r\n        if (error) { setError(error.message); return; }\r\n      } else {\r\n        const { data, error } = await supabase.from('categories').insert([\r\n          { name: form.name, type: 'subcategory', sort_order: form.sort_order ?? 0 }\r\n        ]).select();\r\n        if (error) { setError(error.message); return; }\r\n        subcategoryId = data[0].id;\r\n      }\r\n      if (editingId) {\r\n        await supabase.from('category_subcategory_links').delete().eq('subcategory_id', editingId);\r\n      }\r\n      if (form.parent_category_ids && form.parent_category_ids.length > 0) {\r\n        const inserts = form.parent_category_ids.map(catId => ({\r\n          category_id: parseInt(catId),\r\n          subcategory_id: subcategoryId\r\n        }));\r\n        const { error: linkError } = await supabase.from('category_subcategory_links').insert(inserts);\r\n        if (linkError) { setError(linkError.message); return; }\r\n      }\r\n      setSuccess(editingId ? 'Subcategory updated!' : 'Subcategory added!');\r\n      setEditingId(null);\r\n      setForm(emptySubcategory);\r\n      fetchCategories();\r\n      fetchSubcategories();\r\n      fetchCategorySubcategoryLinks();\r\n      return;\r\n    }\r\n    const submitData = {\r\n      ...form,\r\n    };\r\n    if (editingId) {\r\n      const { error } = await supabase.from('categories').update(submitData).eq('id', editingId);\r\n      if (error) setError(error.message);\r\n      else {\r\n        setSuccess('Item updated!');\r\n        setEditingId(null);\r\n        setForm(isSubcategory ? emptySubcategory : emptyCategory);\r\n        fetchCategories();\r\n        fetchSubcategories();\r\n      }\r\n    } else {\r\n      const { error } = await supabase.from('categories').insert([submitData]);\r\n      if (error) setError(error.message);\r\n      else {\r\n        setSuccess('Item added!');\r\n        setForm(isSubcategory ? emptySubcategory : emptyCategory);\r\n        fetchCategories();\r\n        fetchSubcategories();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEdit = item => {\r\n    setEditingId(item.id);\r\n    if (item.type === 'subcategory') {\r\n      const parentLinks = categorySubcategoryLinks.filter(link => link.subcategory_id === item.id);\r\n      setForm({\r\n        name: item.name,\r\n        type: item.type,\r\n        parent_category_ids: parentLinks.map(link => link.category_id),\r\n        sort_order: item.sort_order ?? 0,\r\n      });\r\n      setIsSubcategory(true);\r\n    } else {\r\n      setForm({\r\n        name: item.name,\r\n        type: item.type,\r\n      });\r\n      setIsSubcategory(false);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (!deleteId) return;\r\n    const { error } = await supabase.from('categories').delete().eq('id', deleteId);\r\n    if (error) setError(error.message);\r\n    else {\r\n      setSuccess('Item deleted!');\r\n      fetchCategories();\r\n      fetchSubcategories();\r\n      fetchCategorySubcategoryLinks();\r\n    }\r\n    setDeleteId(null);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setEditingId(null);\r\n    setForm(isSubcategory ? emptySubcategory : emptyCategory);\r\n    setError('');\r\n    setSuccess('');\r\n  };\r\n\r\n  const toggleType = () => {\r\n    setIsSubcategory(!isSubcategory);\r\n    setForm(isSubcategory ? emptyCategory : emptySubcategory);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ mt: 4 }}>\r\n      <Typography variant=\"h5\" gutterBottom>Category Management</Typography>\r\n      {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\r\n      {success && <Alert severity=\"success\" sx={{ mb: 2 }}>{success}</Alert>}\r\n      <Paper sx={{ p: 2, mb: 4 }}>\r\n        <form onSubmit={handleSubmit}>\r\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems=\"center\">\r\n            <TextField\r\n              name=\"name\"\r\n              label={isSubcategory ? 'Subcategory Name' : 'Category Name'}\r\n              value={form.name}\r\n              onChange={handleChange}\r\n              required\r\n              size=\"small\"\r\n            />\r\n            {isSubcategory && (\r\n              <>\r\n                <FormControl size=\"small\" sx={{ minWidth: 180 }} required>\r\n                  <InputLabel id=\"parent-category-label\">Parent Categories</InputLabel>\r\n                  <Select\r\n                    labelId=\"parent-category-label\"\r\n                    name=\"parent_category_ids\"\r\n                    multiple\r\n                    value={form.parent_category_ids}\r\n                    label=\"Parent Categories\"\r\n                    onChange={handleChange}\r\n                    renderValue={selected => selected.map(id => categories.find(cat => cat.id === id)?.name).join(', ')}\r\n                  >\r\n                    {categories.map(cat => (\r\n                      <MenuItem key={cat.id} value={cat.id}>{cat.name}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                <TextField\r\n                  name=\"sort_order\"\r\n                  label=\"Sort Order\"\r\n                  type=\"number\"\r\n                  value={form.sort_order || 0}\r\n                  onChange={handleChange}\r\n                  size=\"small\"\r\n                  sx={{ minWidth: 100 }}\r\n                />\r\n              </>\r\n            )}\r\n            <Button type=\"button\" variant=\"outlined\" onClick={toggleType}>\r\n              {isSubcategory ? 'Add Category' : 'Add Subcategory'}\r\n            </Button>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              {editingId ? 'Update' : 'Add'}\r\n            </Button>\r\n            {editingId && (\r\n              <Button type=\"button\" variant=\"outlined\" color=\"secondary\" onClick={handleCancel}>\r\n                Cancel\r\n              </Button>\r\n            )}\r\n          </Stack>\r\n        </form>\r\n      </Paper>\r\n      <Typography variant=\"h6\" gutterBottom>Categories</Typography>\r\n      <TableContainer component={Paper} sx={{ mb: 4 }}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell><b>Name</b></TableCell>\r\n              <TableCell><b>Actions</b></TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {categories.map(item => (\r\n              <TableRow key={item.id}>\r\n                <TableCell>{item.name}</TableCell>\r\n                <TableCell>\r\n                  <IconButton color=\"primary\" onClick={() => handleEdit(item)}><EditIcon /></IconButton>\r\n                  <IconButton color=\"error\" onClick={() => setDeleteId(item.id)}><DeleteIcon /></IconButton>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <Typography variant=\"h6\" gutterBottom>Subcategories</Typography>\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell><b>Name</b></TableCell>\r\n              <TableCell><b>Parent Categories</b></TableCell>\r\n              <TableCell><b>Sort Order</b></TableCell>\r\n              <TableCell><b>Actions</b></TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {subcategories\r\n              .sort((a, b) => (a.sort_order ?? 0) - (b.sort_order ?? 0))\r\n              .map(item => (\r\n                <TableRow key={item.id}>\r\n                  <TableCell>{item.name}</TableCell>\r\n                  <TableCell>{categories\r\n                    .filter(cat =>\r\n                      categorySubcategoryLinks\r\n                        .filter(link => link.subcategory_id === item.id)\r\n                        .map(link => link.category_id)\r\n                        .includes(cat.id)\r\n                    )\r\n                    .map(cat => cat.name)\r\n                    .join(', ')\r\n                  }</TableCell>\r\n                  <TableCell>\r\n                    <TextField\r\n                      type=\"number\"\r\n                      value={item.sort_order || 0}\r\n                      onChange={e => handleSortOrderChange(item.id, e.target.value)}\r\n                      size=\"small\"\r\n                      sx={{ width: 60 }}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <IconButton color=\"primary\" onClick={() => handleEdit(item)}><EditIcon /></IconButton>\r\n                    <IconButton color=\"error\" onClick={() => setDeleteId(item.id)}><DeleteIcon /></IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <Dialog open={!!deleteId} onClose={() => setDeleteId(null)}>\r\n        <DialogTitle>Delete Item</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Are you sure you want to delete this item? This action cannot be undone.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setDeleteId(null)}>Cancel</Button>\r\n          <Button onClick={handleDelete} color=\"error\">Delete</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CategoryManager; ","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  IconButton,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Alert,\r\n  CircularProgress,\r\n  Chip,\r\n} from '@mui/material';\r\nimport { supabase } from '../supabaseClient';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\nconst CouponManager = () => {\r\n  const [coupons, setCoupons] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [editingCoupon, setEditingCoupon] = useState(null);\r\n  const [formData, setFormData] = useState({\r\n    code: '',\r\n    discount_type: 'percentage', // or 'fixed'\r\n    discount_value: '',\r\n    min_order_amount: '',\r\n    max_discount: '',\r\n    start_date: '',\r\n    end_date: '',\r\n    usage_limit: '',\r\n    is_active: true\r\n  });\r\n\r\n  const fetchCoupons = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data, error } = await supabase\r\n        .from('coupons')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n      \r\n      if (error) throw error;\r\n      setCoupons(data);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCoupons();\r\n  }, []);\r\n\r\n  const handleOpenDialog = (coupon = null) => {\r\n    if (coupon) {\r\n      setEditingCoupon(coupon);\r\n      setFormData({\r\n        ...coupon,\r\n        start_date: coupon.start_date?.split('T')[0] || '',\r\n        end_date: coupon.end_date?.split('T')[0] || '',\r\n      });\r\n    } else {\r\n      setEditingCoupon(null);\r\n      setFormData({\r\n        code: '',\r\n        discount_type: 'percentage',\r\n        discount_value: '',\r\n        min_order_amount: '',\r\n        max_discount: '',\r\n        start_date: '',\r\n        end_date: '',\r\n        usage_limit: '',\r\n        is_active: true\r\n      });\r\n    }\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setDialogOpen(false);\r\n    setEditingCoupon(null);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const couponData = {\r\n        ...formData,\r\n        discount_value: parseFloat(formData.discount_value),\r\n        min_order_amount: parseFloat(formData.min_order_amount) || null,\r\n        max_discount: parseFloat(formData.max_discount) || null,\r\n        usage_limit: parseInt(formData.usage_limit) || null,\r\n      };\r\n\r\n      if (editingCoupon) {\r\n        const { error } = await supabase\r\n          .from('coupons')\r\n          .update(couponData)\r\n          .eq('id', editingCoupon.id);\r\n        if (error) throw error;\r\n      } else {\r\n        const { error } = await supabase\r\n          .from('coupons')\r\n          .insert([couponData]);\r\n        if (error) throw error;\r\n      }\r\n\r\n      handleCloseDialog();\r\n      fetchCoupons();\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (window.confirm('Are you sure you want to delete this coupon?')) {\r\n      try {\r\n        const { error } = await supabase\r\n          .from('coupons')\r\n          .delete()\r\n          .eq('id', id);\r\n        if (error) throw error;\r\n        fetchCoupons();\r\n      } catch (err) {\r\n        setError(err.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n        <Typography variant=\"h4\">Coupon Management</Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          startIcon={<AddIcon />}\r\n          onClick={() => handleOpenDialog()}\r\n        >\r\n          Add Coupon\r\n        </Button>\r\n      </Box>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Code</TableCell>\r\n              <TableCell>Discount</TableCell>\r\n              <TableCell>Min. Order</TableCell>\r\n              <TableCell>Valid Until</TableCell>\r\n              <TableCell>Status</TableCell>\r\n              <TableCell>Actions</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {coupons.map((coupon) => (\r\n              <TableRow key={coupon.id}>\r\n                <TableCell>{coupon.code}</TableCell>\r\n                <TableCell>\r\n                  {coupon.discount_type === 'percentage' \r\n                    ? `${coupon.discount_value}%`\r\n                    : `£${coupon.discount_value}`}\r\n                </TableCell>\r\n                <TableCell>\r\n                  {coupon.min_order_amount \r\n                    ? `£${coupon.min_order_amount}`\r\n                    : 'No minimum'}\r\n                </TableCell>\r\n                <TableCell>\r\n                  {new Date(coupon.end_date).toLocaleDateString()}\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Chip\r\n                    label={coupon.is_active ? 'Active' : 'Inactive'}\r\n                    color={coupon.is_active ? 'success' : 'default'}\r\n                    size=\"small\"\r\n                  />\r\n                </TableCell>\r\n                <TableCell>\r\n                  <IconButton\r\n                    color=\"primary\"\r\n                    onClick={() => handleOpenDialog(coupon)}\r\n                    size=\"small\"\r\n                  >\r\n                    <EditIcon />\r\n                  </IconButton>\r\n                  <IconButton\r\n                    color=\"error\"\r\n                    onClick={() => handleDelete(coupon.id)}\r\n                    size=\"small\"\r\n                  >\r\n                    <DeleteIcon />\r\n                  </IconButton>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      <Dialog open={dialogOpen} onClose={handleCloseDialog} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle>\r\n          {editingCoupon ? 'Edit Coupon' : 'Add New Coupon'}\r\n        </DialogTitle>\r\n        <form onSubmit={handleSubmit}>\r\n          <DialogContent>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n              <TextField\r\n                label=\"Coupon Code\"\r\n                value={formData.code}\r\n                onChange={(e) => setFormData({ ...formData, code: e.target.value })}\r\n                required\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                select\r\n                label=\"Discount Type\"\r\n                value={formData.discount_type}\r\n                onChange={(e) => setFormData({ ...formData, discount_type: e.target.value })}\r\n                SelectProps={{ native: true }}\r\n                fullWidth\r\n              >\r\n                <option value=\"percentage\">Percentage</option>\r\n                <option value=\"fixed\">Fixed Amount</option>\r\n              </TextField>\r\n              <TextField\r\n                label=\"Discount Value\"\r\n                type=\"number\"\r\n                value={formData.discount_value}\r\n                onChange={(e) => setFormData({ ...formData, discount_value: e.target.value })}\r\n                required\r\n                fullWidth\r\n                InputProps={{\r\n                  startAdornment: formData.discount_type === 'percentage' ? '%' : '£'\r\n                }}\r\n              />\r\n              <TextField\r\n                label=\"Minimum Order Amount\"\r\n                type=\"number\"\r\n                value={formData.min_order_amount}\r\n                onChange={(e) => setFormData({ ...formData, min_order_amount: e.target.value })}\r\n                fullWidth\r\n                InputProps={{ startAdornment: '£' }}\r\n              />\r\n              <TextField\r\n                label=\"Maximum Discount\"\r\n                type=\"number\"\r\n                value={formData.max_discount}\r\n                onChange={(e) => setFormData({ ...formData, max_discount: e.target.value })}\r\n                fullWidth\r\n                InputProps={{ startAdornment: '£' }}\r\n              />\r\n              <TextField\r\n                label=\"Start Date\"\r\n                type=\"date\"\r\n                value={formData.start_date}\r\n                onChange={(e) => setFormData({ ...formData, start_date: e.target.value })}\r\n                fullWidth\r\n                InputLabelProps={{ shrink: true }}\r\n              />\r\n              <TextField\r\n                label=\"End Date\"\r\n                type=\"date\"\r\n                value={formData.end_date}\r\n                onChange={(e) => setFormData({ ...formData, end_date: e.target.value })}\r\n                required\r\n                fullWidth\r\n                InputLabelProps={{ shrink: true }}\r\n              />\r\n              <TextField\r\n                label=\"Usage Limit\"\r\n                type=\"number\"\r\n                value={formData.usage_limit}\r\n                onChange={(e) => setFormData({ ...formData, usage_limit: e.target.value })}\r\n                fullWidth\r\n              />\r\n            </Box>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleCloseDialog}>Cancel</Button>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              {editingCoupon ? 'Update' : 'Create'}\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CouponManager; ","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box, Typography, CircularProgress, Alert, Container, Drawer, List, ListItem, ListItemIcon, ListItemText, Toolbar, AppBar, CssBaseline, Button, Grid, Paper\r\n} from '@mui/material';\r\nimport DashboardIcon from '@mui/icons-material/Dashboard';\r\nimport RestaurantMenuIcon from '@mui/icons-material/RestaurantMenu';\r\nimport CategoryIcon from '@mui/icons-material/Category';\r\nimport LocalOfferIcon from '@mui/icons-material/LocalOffer';\r\nimport { supabase } from '../supabaseClient';\r\nimport MenuManager from './MenuManager';\r\nimport AdminOrders from './AdminOrders';\r\nimport CategoryManager from './CategoryManager';\r\nimport CouponManager from './CouponManager';\r\n\r\nconst drawerWidth = 220;\r\n\r\nconst AdminDashboard = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [selectedMenu, setSelectedMenu] = useState('dashboard');\r\n\r\n  useEffect(() => {\r\n    const checkAdmin = async () => {\r\n      setLoading(true);\r\n      setError('');\r\n      const { data: { user }, error: userError } = await supabase.auth.getUser();\r\n      if (userError || !user) {\r\n        setError('You must be logged in.');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      const { data, error: profileError } = await supabase\r\n        .from('profiles')\r\n        .select('role')\r\n        .eq('id', user.id)\r\n        .single();\r\n      if (profileError || !data) {\r\n        setError('Profile not found.');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      if (data.role === 'admin') {\r\n        setIsAdmin(true);\r\n      } else {\r\n        setError('You are not authorized to view this page.');\r\n      }\r\n      setLoading(false);\r\n    };\r\n    checkAdmin();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Container maxWidth=\"md\" sx={{ mt: 8, textAlign: 'center' }}>\r\n        <CircularProgress />\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Container maxWidth=\"sm\" sx={{ mt: 8 }}>\r\n        <Alert severity=\"error\">{error}</Alert>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex' }}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" noWrap component=\"div\">\r\n            Admin Dashboard\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        sx={{\r\n          width: drawerWidth,\r\n          flexShrink: 0,\r\n          [`& .MuiDrawer-paper`]: { width: drawerWidth, boxSizing: 'border-box' },\r\n        }}\r\n      >\r\n        <Toolbar />\r\n        <Box sx={{ overflow: 'auto' }}>\r\n          <List>\r\n            <ListItem button selected={selectedMenu === 'dashboard'} onClick={() => setSelectedMenu('dashboard')}>\r\n              <ListItemIcon><DashboardIcon /></ListItemIcon>\r\n              <ListItemText primary=\"Dashboard Home\" />\r\n            </ListItem>\r\n            <ListItem button selected={selectedMenu === 'menu'} onClick={() => setSelectedMenu('menu')}>\r\n              <ListItemIcon><RestaurantMenuIcon /></ListItemIcon>\r\n              <ListItemText primary=\"Menu Management\" />\r\n            </ListItem>\r\n            <ListItem button selected={selectedMenu === 'categories'} onClick={() => setSelectedMenu('categories')}>\r\n              <ListItemIcon><CategoryIcon /></ListItemIcon>\r\n              <ListItemText primary=\"Categories & Subcategories\" />\r\n            </ListItem>\r\n            <ListItem button selected={selectedMenu === 'orders'} onClick={() => setSelectedMenu('orders')}>\r\n              <ListItemIcon><RestaurantMenuIcon /></ListItemIcon>\r\n              <ListItemText primary=\"Orders\" />\r\n            </ListItem>\r\n            <ListItem button selected={selectedMenu === 'coupons'} onClick={() => setSelectedMenu('coupons')}>\r\n              <ListItemIcon><LocalOfferIcon /></ListItemIcon>\r\n              <ListItemText primary=\"Coupons & Offers\" />\r\n            </ListItem>\r\n          </List>\r\n        </Box>\r\n      </Drawer>\r\n      <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\r\n        <Toolbar />\r\n        {selectedMenu === 'dashboard' && (\r\n          <Box>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n              Welcome, Admin!\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n              Use the side menu to manage menu items and more.\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n        {selectedMenu === 'menu' && <MenuManager />}\r\n        {selectedMenu === 'categories' && <CategoryManager />}\r\n        {selectedMenu === 'orders' && <AdminOrders />}\r\n        {selectedMenu === 'coupons' && <CouponManager />}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard; "],"names":["emptyItem","name","description","price","image_url","category_ids","subcategory_ids","items","setItems","useState","form","setForm","editingId","setEditingId","error","setError","success","setSuccess","deleteId","setDeleteId","uploading","setUploading","categories","setCategories","subcategories","setSubcategories","subcategoryLinks","setSubcategoryLinks","categoryLinks","setCategoryLinks","categorySubcategoryLinks","useMenu","fetchItems","async","data","fetchError","supabase","from","select","message","useEffect","filter","c","type","fetchCategories","subcatData","subLinks","forEach","link","menu_item_id","push","subcategory_id","catData","catLinks","category_id","fetchLinks","handleChange","e","value","target","_objectSpread","split","availableSubcategories","sub","some","includes","id","_jsxs","Box","sx","mt","children","_jsx","Typography","variant","gutterBottom","Alert","severity","mb","Paper","p","onSubmit","preventDefault","length","menuItemId","update","parseFloat","eq","insert","delete","categoryInserts","map","catId","parseInt","catError","subcategoryInserts","subId","subError","Stack","direction","xs","sm","spacing","alignItems","TextField","label","onChange","required","size","inputProps","step","accept","file","files","fileExt","pop","fileName","concat","Math","random","uploadError","storage","upload","publicUrl","getPublicUrl","path","err","style","display","htmlFor","Button","component","disabled","CircularProgress","width","height","overflow","src","alt","objectFit","FormControl","minWidth","InputLabel","Select","multiple","renderValue","selected","_categories$find","find","cat","join","MenuItem","_availableSubcategori","color","onClick","handleCancel","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","item","_item$price","toLocaleString","currency","_categories$find2","Boolean","_subcategories$find","IconButton","subcatLinks","handleEdit","EditIcon","DeleteIcon","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","deleteError","AdminOrders","_selectedOrder$profil","_selectedOrder$total","orders","setOrders","users","setUsers","loading","setLoading","selectedOrder","setSelectedOrder","viewDialogOpen","setViewDialogOpen","fetchOrders","ordersData","ordersError","order","ascending","profilesData","profilesError","ordersWithProfiles","profiles","profile","user_id","console","updateOrderStatus","orderId","newStatus","status","getStatusColor","justifyContent","minHeight","Container","maxWidth","RefreshIcon","_order$profiles","_order$total","email","total","Chip","Date","created_at","gap","handleViewOrder","VisibilityIcon","_Fragment","CheckCircleIcon","CancelIcon","fullWidth","index","_ref","quantity","emptyCategory","emptySubcategory","parent_category_ids","sort_order","isSubcategory","setIsSubcategory","setCategorySubcategoryLinks","fetchSubcategories","fetchCategorySubcategoryLinks","_item$sort_order","parentLinks","subcategoryId","_form$sort_order","_form$sort_order2","inserts","linkError","submitData","labelId","toggleType","sort","a","b","_a$sort_order","_b$sort_order","newOrder","Number","handleSortOrderChange","CouponManager","coupons","setCoupons","dialogOpen","setDialogOpen","editingCoupon","setEditingCoupon","formData","setFormData","code","discount_type","discount_value","min_order_amount","max_discount","start_date","end_date","usage_limit","is_active","fetchCoupons","handleOpenDialog","coupon","arguments","undefined","_coupon$start_date","_coupon$end_date","handleCloseDialog","startIcon","AddIcon","toLocaleDateString","window","confirm","handleDelete","couponData","flexDirection","SelectProps","native","InputProps","startAdornment","InputLabelProps","shrink","AdminDashboard","isAdmin","setIsAdmin","selectedMenu","setSelectedMenu","user","userError","auth","getUser","profileError","single","role","checkAdmin","textAlign","CssBaseline","AppBar","position","zIndex","theme","drawer","Toolbar","noWrap","Drawer","flexShrink","boxSizing","List","ListItem","button","ListItemIcon","DashboardIcon","ListItemText","primary","RestaurantMenuIcon","CategoryIcon","LocalOfferIcon","flexGrow","MenuManager","CategoryManager"],"sourceRoot":""}