{"ast":null,"code":"var _jsxFileName = \"E:\\\\food-ordering-website\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check active sessions and sets the user\n    supabase.auth.getSession().then(({\n      data: {\n        session\n      }\n    }) => {\n      var _session$user;\n      setUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n      setLoading(false);\n    });\n\n    // Listen for changes on auth state (logged in, signed out, etc.)\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      var _session$user2;\n      setUser((_session$user2 = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user2 !== void 0 ? _session$user2 : null);\n      setLoading(false);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const value = {\n    user,\n    loading,\n    signUp: data => supabase.auth.signUp(data),\n    signIn: data => supabase.auth.signInWithPassword(data),\n    signOut: () => supabase.auth.signOut(),\n    resetPassword: email => supabase.auth.resetPasswordForEmail(email),\n    updatePassword: password => supabase.auth.updateUser({\n      password\n    })\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","auth","getSession","then","data","session","_session$user","subscription","onAuthStateChange","_event","_session$user2","unsubscribe","value","signUp","signIn","signInWithPassword","signOut","resetPassword","email","resetPasswordForEmail","updatePassword","password","updateUser","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/food-ordering-website/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { supabase } from '../supabaseClient';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check active sessions and sets the user\r\n    supabase.auth.getSession().then(({ data: { session } }) => {\r\n      setUser(session?.user ?? null);\r\n      setLoading(false);\r\n    });\r\n\r\n    // Listen for changes on auth state (logged in, signed out, etc.)\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\r\n      setUser(session?.user ?? null);\r\n      setLoading(false);\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, []);\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    signUp: (data) => supabase.auth.signUp(data),\r\n    signIn: (data) => supabase.auth.signInWithPassword(data),\r\n    signOut: () => supabase.auth.signOut(),\r\n    resetPassword: (email) => supabase.auth.resetPasswordForEmail(email),\r\n    updatePassword: (password) => supabase.auth.updateUser({ password }),\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n} "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,QAAQ,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,SAASQ,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,OAAOR,UAAU,CAACM,WAAW,CAAC;AAChC;AAACE,EAAA,CAFeD,OAAO;AAIvB,OAAO,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACAC,QAAQ,CAACa,IAAI,CAACC,UAAU,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MAAEC,IAAI,EAAE;QAAEC;MAAQ;IAAE,CAAC,KAAK;MAAA,IAAAC,aAAA;MACzDR,OAAO,EAAAQ,aAAA,GAACD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAER,IAAI,cAAAS,aAAA,cAAAA,aAAA,GAAI,IAAI,CAAC;MAC9BN,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;;IAEF;IACA,MAAM;MAAEI,IAAI,EAAE;QAAEG;MAAa;IAAE,CAAC,GAAGnB,QAAQ,CAACa,IAAI,CAACO,iBAAiB,CAAC,CAACC,MAAM,EAAEJ,OAAO,KAAK;MAAA,IAAAK,cAAA;MACtFZ,OAAO,EAAAY,cAAA,GAACL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAER,IAAI,cAAAa,cAAA,cAAAA,cAAA,GAAI,IAAI,CAAC;MAC9BV,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO,MAAMO,YAAY,CAACI,WAAW,CAAC,CAAC;EACzC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,KAAK,GAAG;IACZf,IAAI;IACJE,OAAO;IACPc,MAAM,EAAGT,IAAI,IAAKhB,QAAQ,CAACa,IAAI,CAACY,MAAM,CAACT,IAAI,CAAC;IAC5CU,MAAM,EAAGV,IAAI,IAAKhB,QAAQ,CAACa,IAAI,CAACc,kBAAkB,CAACX,IAAI,CAAC;IACxDY,OAAO,EAAEA,CAAA,KAAM5B,QAAQ,CAACa,IAAI,CAACe,OAAO,CAAC,CAAC;IACtCC,aAAa,EAAGC,KAAK,IAAK9B,QAAQ,CAACa,IAAI,CAACkB,qBAAqB,CAACD,KAAK,CAAC;IACpEE,cAAc,EAAGC,QAAQ,IAAKjC,QAAQ,CAACa,IAAI,CAACqB,UAAU,CAAC;MAAED;IAAS,CAAC;EACrE,CAAC;EAED,oBACE/B,OAAA,CAACC,WAAW,CAACgC,QAAQ;IAACX,KAAK,EAAEA,KAAM;IAAAjB,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B;AAAC/B,GAAA,CAnCeF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}