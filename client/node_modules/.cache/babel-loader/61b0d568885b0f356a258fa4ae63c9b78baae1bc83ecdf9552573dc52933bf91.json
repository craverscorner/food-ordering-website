{"ast":null,"code":"var _jsxFileName = \"E:\\\\food-ordering-website\\\\client\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport function useCart() {\n  _s();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n_s(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function CartProvider({\n  children\n}) {\n  _s2();\n  const [cart, setCart] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load cart from localStorage initially\n  useEffect(() => {\n    try {\n      const stored = localStorage.getItem('cart');\n      setCart(stored ? JSON.parse(stored) : []);\n    } catch (err) {\n      console.error('Error loading cart from localStorage:', err);\n      setCart([]);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Load cart from Supabase when user is authenticated\n  useEffect(() => {\n    let mounted = true;\n    const loadCart = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (user && mounted) {\n          const {\n            data,\n            error\n          } = await supabase.from('carts').select('*').eq('user_id', user.id);\n          if (error) throw error;\n\n          // data is an array; use the first cart if it exists\n          const cartData = Array.isArray(data) && data.length > 0 ? data[0] : null;\n          if (mounted) {\n            setCart((cartData === null || cartData === void 0 ? void 0 : cartData.items) || []);\n          }\n        }\n      } catch (err) {\n        console.error('Error loading cart from Supabase:', err);\n        if (mounted) {\n          setError(err.message);\n        }\n      }\n    };\n    loadCart();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  // Save cart to localStorage\n  useEffect(() => {\n    try {\n      localStorage.setItem('cart', JSON.stringify(cart));\n    } catch (err) {\n      console.error('Error saving cart to localStorage:', err);\n    }\n  }, [cart]);\n\n  // Save cart to Supabase when authenticated\n  useEffect(() => {\n    let mounted = true;\n    const saveCart = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (user && mounted) {\n          const {\n            error\n          } = await supabase.from('carts').upsert({\n            user_id: user.id,\n            items: cart,\n            updated_at: new Date().toISOString()\n          }, {\n            onConflict: ['user_id']\n          });\n          if (error) throw error;\n        }\n      } catch (err) {\n        console.error('Error saving cart to Supabase:', err);\n        if (mounted) {\n          setError(err.message);\n        }\n      }\n    };\n    if (!loading) {\n      saveCart();\n    }\n    return () => {\n      mounted = false;\n    };\n  }, [cart, loading]);\n  const addToCart = item => {\n    setCart(prev => {\n      const existingItem = prev.find(i => i.id === item.id);\n      if (existingItem) {\n        return prev.map(i => i.id === item.id ? {\n          ...i,\n          quantity: i.quantity + 1\n        } : i);\n      }\n      return [...prev, {\n        ...item,\n        quantity: 1\n      }];\n    });\n  };\n  const removeFromCart = id => {\n    setCart(prev => prev.filter(item => item.id !== id));\n  };\n  const updateQuantity = (id, quantity) => {\n    if (quantity < 1) return;\n    setCart(prev => prev.map(item => item.id === id ? {\n      ...item,\n      quantity\n    } : item));\n  };\n  const clearCart = () => {\n    setCart([]);\n  };\n  const value = {\n    cart,\n    loading,\n    error,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n}\n_s2(CartProvider, \"F8zifkg8J5aj5tq1fKr5Da4OhtY=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","CartContext","useCart","_s","context","Error","CartProvider","children","_s2","cart","setCart","loading","setLoading","error","setError","stored","localStorage","getItem","JSON","parse","err","console","mounted","loadCart","data","user","auth","getUser","from","select","eq","id","cartData","Array","isArray","length","items","message","setItem","stringify","saveCart","upsert","user_id","updated_at","Date","toISOString","onConflict","addToCart","item","prev","existingItem","find","i","map","quantity","removeFromCart","filter","updateQuantity","clearCart","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/food-ordering-website/client/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { supabase } from '../supabaseClient';\r\n\r\nconst CartContext = createContext();\r\n\r\nexport function useCart() {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function CartProvider({ children }) {\r\n  const [cart, setCart] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Load cart from localStorage initially\r\n  useEffect(() => {\r\n    try {\r\n      const stored = localStorage.getItem('cart');\r\n      setCart(stored ? JSON.parse(stored) : []);\r\n    } catch (err) {\r\n      console.error('Error loading cart from localStorage:', err);\r\n      setCart([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Load cart from Supabase when user is authenticated\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    const loadCart = async () => {\r\n      try {\r\n        const { data: { user } } = await supabase.auth.getUser();\r\n        if (user && mounted) {\r\n          const { data, error } = await supabase\r\n            .from('carts')\r\n            .select('*')\r\n            .eq('user_id', user.id);\r\n          \r\n          if (error) throw error;\r\n          \r\n          // data is an array; use the first cart if it exists\r\n          const cartData = Array.isArray(data) && data.length > 0 ? data[0] : null;\r\n          if (mounted) {\r\n            setCart(cartData?.items || []);\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('Error loading cart from Supabase:', err);\r\n        if (mounted) {\r\n          setError(err.message);\r\n        }\r\n      }\r\n    };\r\n\r\n    loadCart();\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, []);\r\n\r\n  // Save cart to localStorage\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem('cart', JSON.stringify(cart));\r\n    } catch (err) {\r\n      console.error('Error saving cart to localStorage:', err);\r\n    }\r\n  }, [cart]);\r\n\r\n  // Save cart to Supabase when authenticated\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    const saveCart = async () => {\r\n      try {\r\n        const { data: { user } } = await supabase.auth.getUser();\r\n        if (user && mounted) {\r\n          const { error } = await supabase\r\n            .from('carts')\r\n            .upsert(\r\n              {\r\n                user_id: user.id,\r\n                items: cart,\r\n                updated_at: new Date().toISOString()\r\n              },\r\n              { onConflict: ['user_id'] }\r\n            );\r\n          if (error) throw error;\r\n        }\r\n      } catch (err) {\r\n        console.error('Error saving cart to Supabase:', err);\r\n        if (mounted) {\r\n          setError(err.message);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (!loading) {\r\n      saveCart();\r\n    }\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, [cart, loading]);\r\n\r\n  const addToCart = (item) => {\r\n    setCart(prev => {\r\n      const existingItem = prev.find(i => i.id === item.id);\r\n      if (existingItem) {\r\n        return prev.map(i => \r\n          i.id === item.id \r\n            ? { ...i, quantity: i.quantity + 1 }\r\n            : i\r\n        );\r\n      }\r\n      return [...prev, { ...item, quantity: 1 }];\r\n    });\r\n  };\r\n\r\n  const removeFromCart = (id) => {\r\n    setCart(prev => prev.filter(item => item.id !== id));\r\n  };\r\n\r\n  const updateQuantity = (id, quantity) => {\r\n    if (quantity < 1) return;\r\n    setCart(prev => \r\n      prev.map(item => \r\n        item.id === id \r\n          ? { ...item, quantity }\r\n          : item\r\n      )\r\n    );\r\n  };\r\n\r\n  const clearCart = () => {\r\n    setCart([]);\r\n  };\r\n\r\n  const value = {\r\n    cart,\r\n    loading,\r\n    error,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={value}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}