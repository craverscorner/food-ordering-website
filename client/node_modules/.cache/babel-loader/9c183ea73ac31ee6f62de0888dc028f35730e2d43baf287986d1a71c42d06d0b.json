{"ast":null,"code":"import _objectSpread from\"E:/food-ordering-website/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import{supabase}from'../supabaseClient';import{jsx as _jsx}from\"react/jsx-runtime\";const CartContext=/*#__PURE__*/createContext();export function useCart(){const context=useContext(CartContext);if(!context){throw new Error('useCart must be used within a CartProvider');}return context;}export function CartProvider(_ref){let{children}=_ref;const[cart,setCart]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[initialized,setInitialized]=useState(false);// Initialize cart from localStorage and Supabase\nuseEffect(()=>{const initializeCart=async()=>{try{// First try to get from localStorage\nconst stored=localStorage.getItem('cart');let initialCart=[];if(stored){try{const parsedCart=JSON.parse(stored);if(Array.isArray(parsedCart)){initialCart=parsedCart;}}catch(e){console.error('Error parsing stored cart:',e);}}// Then try to get from Supabase if user is authenticated\nconst{data:{user}}=await supabase.auth.getUser();if(user){const{data,error:fetchError}=await supabase.from('carts').select('*').eq('user_id',user.id).single();if(fetchError&&fetchError.code!=='PGRST116'){throw fetchError;}if(data!==null&&data!==void 0&&data.items){// Merge local cart with server cart\nconst serverItems=data.items;const mergedCart=[...initialCart];serverItems.forEach(serverItem=>{const existingItem=mergedCart.find(item=>item.id===serverItem.id);if(existingItem){existingItem.quantity=Math.max(existingItem.quantity,serverItem.quantity);}else{mergedCart.push(serverItem);}});initialCart=mergedCart;}}setCart(initialCart);}catch(err){console.error('Error initializing cart:',err);setError(err.message);}finally{setLoading(false);setInitialized(true);}};initializeCart();// Subscribe to auth state changes\nconst{data:{subscription}}=supabase.auth.onAuthStateChange(async(event,session)=>{if(event==='SIGNED_IN'){// When user signs in, fetch their cart from Supabase\nconst{data,error:fetchError}=await supabase.from('carts').select('*').eq('user_id',session.user.id).single();if(!fetchError&&data!==null&&data!==void 0&&data.items){// Merge with existing cart\nconst serverItems=data.items;const mergedCart=[...cart];serverItems.forEach(serverItem=>{const existingItem=mergedCart.find(item=>item.id===serverItem.id);if(existingItem){existingItem.quantity=Math.max(existingItem.quantity,serverItem.quantity);}else{mergedCart.push(serverItem);}});setCart(mergedCart);}}else if(event==='SIGNED_OUT'){// When user signs out, keep the cart in localStorage\nlocalStorage.setItem('cart',JSON.stringify(cart));}});return()=>{subscription===null||subscription===void 0?void 0:subscription.unsubscribe();};},[]);// Set up real-time subscription\nuseEffect(()=>{if(!initialized)return;const setupRealtimeSubscription=async()=>{const{data:{user}}=await supabase.auth.getUser();if(!user)return;// Subscribe to changes in the user's cart\nconst subscription=supabase.channel('cart_changes').on('postgres_changes',{event:'*',schema:'public',table:'carts',filter:\"user_id=eq.\".concat(user.id)},payload=>{var _payload$new;if((_payload$new=payload.new)!==null&&_payload$new!==void 0&&_payload$new.items){setCart(payload.new.items);localStorage.setItem('cart',JSON.stringify(payload.new.items));}}).subscribe();return()=>{subscription.unsubscribe();};};const cleanup=setupRealtimeSubscription();return()=>{cleanup.then(unsubscribe=>unsubscribe===null||unsubscribe===void 0?void 0:unsubscribe());};},[initialized]);// Sync with Supabase when cart changes\nuseEffect(()=>{if(!initialized)return;const syncWithSupabase=async()=>{try{const{data:{user}}=await supabase.auth.getUser();if(!user)return;const{error:saveError}=await supabase.from('carts').upsert({user_id:user.id,items:cart,updated_at:new Date().toISOString()},{onConflict:'user_id'});if(saveError)throw saveError;}catch(err){console.error('Error syncing cart with Supabase:',err);setError(err.message);}};// Debounce the sync operation\nconst timeoutId=setTimeout(syncWithSupabase,1000);return()=>clearTimeout(timeoutId);},[cart,initialized]);// Save to localStorage\nuseEffect(()=>{if(!initialized)return;try{localStorage.setItem('cart',JSON.stringify(cart));}catch(err){console.error('Error saving cart to localStorage:',err);}},[cart,initialized]);const addToCart=item=>{if(!item||!item.id){console.error('Invalid item added to cart:',item);return;}setCart(prev=>{const existingItem=prev.find(i=>i.id===item.id);if(existingItem){return prev.map(i=>i.id===item.id?_objectSpread(_objectSpread({},i),{},{quantity:(i.quantity||0)+1}):i);}return[...prev,_objectSpread(_objectSpread({},item),{},{quantity:1})];});};const removeFromCart=id=>{if(!id){console.error('Invalid item ID for removal:',id);return;}setCart(prev=>prev.filter(item=>item.id!==id));};const updateQuantity=(id,quantity)=>{if(!id||quantity<1){console.error('Invalid quantity update:',{id,quantity});return;}setCart(prev=>prev.map(item=>item.id===id?_objectSpread(_objectSpread({},item),{},{quantity}):item));};const clearCart=()=>{setCart([]);};const value={cart,loading,error,addToCart,removeFromCart,updateQuantity,clearCart};if(!initialized){return null;}return/*#__PURE__*/_jsx(CartContext.Provider,{value:value,children:children});}","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsx","_jsx","CartContext","useCart","context","Error","CartProvider","_ref","children","cart","setCart","loading","setLoading","error","setError","initialized","setInitialized","initializeCart","stored","localStorage","getItem","initialCart","parsedCart","JSON","parse","Array","isArray","e","console","data","user","auth","getUser","fetchError","from","select","eq","id","single","code","items","serverItems","mergedCart","forEach","serverItem","existingItem","find","item","quantity","Math","max","push","err","message","subscription","onAuthStateChange","event","session","setItem","stringify","unsubscribe","setupRealtimeSubscription","channel","on","schema","table","filter","concat","payload","_payload$new","new","subscribe","cleanup","then","syncWithSupabase","saveError","upsert","user_id","updated_at","Date","toISOString","onConflict","timeoutId","setTimeout","clearTimeout","addToCart","prev","i","map","_objectSpread","removeFromCart","updateQuantity","clearCart","value","Provider"],"sources":["E:/food-ordering-website/client/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { supabase } from '../supabaseClient';\r\n\r\nconst CartContext = createContext();\r\n\r\nexport function useCart() {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function CartProvider({ children }) {\r\n  const [cart, setCart] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [initialized, setInitialized] = useState(false);\r\n\r\n  // Initialize cart from localStorage and Supabase\r\n  useEffect(() => {\r\n    const initializeCart = async () => {\r\n      try {\r\n        // First try to get from localStorage\r\n        const stored = localStorage.getItem('cart');\r\n        let initialCart = [];\r\n        \r\n        if (stored) {\r\n          try {\r\n            const parsedCart = JSON.parse(stored);\r\n            if (Array.isArray(parsedCart)) {\r\n              initialCart = parsedCart;\r\n            }\r\n          } catch (e) {\r\n            console.error('Error parsing stored cart:', e);\r\n          }\r\n        }\r\n\r\n        // Then try to get from Supabase if user is authenticated\r\n        const { data: { user } } = await supabase.auth.getUser();\r\n        \r\n        if (user) {\r\n          const { data, error: fetchError } = await supabase\r\n            .from('carts')\r\n            .select('*')\r\n            .eq('user_id', user.id)\r\n            .single();\r\n\r\n          if (fetchError && fetchError.code !== 'PGRST116') {\r\n            throw fetchError;\r\n          }\r\n\r\n          if (data?.items) {\r\n            // Merge local cart with server cart\r\n            const serverItems = data.items;\r\n            const mergedCart = [...initialCart];\r\n            \r\n            serverItems.forEach(serverItem => {\r\n              const existingItem = mergedCart.find(item => item.id === serverItem.id);\r\n              if (existingItem) {\r\n                existingItem.quantity = Math.max(existingItem.quantity, serverItem.quantity);\r\n              } else {\r\n                mergedCart.push(serverItem);\r\n              }\r\n            });\r\n            \r\n            initialCart = mergedCart;\r\n          }\r\n        }\r\n\r\n        setCart(initialCart);\r\n      } catch (err) {\r\n        console.error('Error initializing cart:', err);\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n        setInitialized(true);\r\n      }\r\n    };\r\n\r\n    initializeCart();\r\n\r\n    // Subscribe to auth state changes\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\r\n      if (event === 'SIGNED_IN') {\r\n        // When user signs in, fetch their cart from Supabase\r\n        const { data, error: fetchError } = await supabase\r\n          .from('carts')\r\n          .select('*')\r\n          .eq('user_id', session.user.id)\r\n          .single();\r\n\r\n        if (!fetchError && data?.items) {\r\n          // Merge with existing cart\r\n          const serverItems = data.items;\r\n          const mergedCart = [...cart];\r\n          \r\n          serverItems.forEach(serverItem => {\r\n            const existingItem = mergedCart.find(item => item.id === serverItem.id);\r\n            if (existingItem) {\r\n              existingItem.quantity = Math.max(existingItem.quantity, serverItem.quantity);\r\n            } else {\r\n              mergedCart.push(serverItem);\r\n            }\r\n          });\r\n          \r\n          setCart(mergedCart);\r\n        }\r\n      } else if (event === 'SIGNED_OUT') {\r\n        // When user signs out, keep the cart in localStorage\r\n        localStorage.setItem('cart', JSON.stringify(cart));\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      subscription?.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  // Set up real-time subscription\r\n  useEffect(() => {\r\n    if (!initialized) return;\r\n\r\n    const setupRealtimeSubscription = async () => {\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      \r\n      if (!user) return;\r\n\r\n      // Subscribe to changes in the user's cart\r\n      const subscription = supabase\r\n        .channel('cart_changes')\r\n        .on(\r\n          'postgres_changes',\r\n          {\r\n            event: '*',\r\n            schema: 'public',\r\n            table: 'carts',\r\n            filter: `user_id=eq.${user.id}`\r\n          },\r\n          (payload) => {\r\n            if (payload.new?.items) {\r\n              setCart(payload.new.items);\r\n              localStorage.setItem('cart', JSON.stringify(payload.new.items));\r\n            }\r\n          }\r\n        )\r\n        .subscribe();\r\n\r\n      return () => {\r\n        subscription.unsubscribe();\r\n      };\r\n    };\r\n\r\n    const cleanup = setupRealtimeSubscription();\r\n    return () => {\r\n      cleanup.then(unsubscribe => unsubscribe?.());\r\n    };\r\n  }, [initialized]);\r\n\r\n  // Sync with Supabase when cart changes\r\n  useEffect(() => {\r\n    if (!initialized) return;\r\n\r\n    const syncWithSupabase = async () => {\r\n      try {\r\n        const { data: { user } } = await supabase.auth.getUser();\r\n        \r\n        if (!user) return;\r\n\r\n        const { error: saveError } = await supabase\r\n          .from('carts')\r\n          .upsert({\r\n            user_id: user.id,\r\n            items: cart,\r\n            updated_at: new Date().toISOString()\r\n          }, {\r\n            onConflict: 'user_id'\r\n          });\r\n\r\n        if (saveError) throw saveError;\r\n\r\n      } catch (err) {\r\n        console.error('Error syncing cart with Supabase:', err);\r\n        setError(err.message);\r\n      }\r\n    };\r\n\r\n    // Debounce the sync operation\r\n    const timeoutId = setTimeout(syncWithSupabase, 1000);\r\n    return () => clearTimeout(timeoutId);\r\n  }, [cart, initialized]);\r\n\r\n  // Save to localStorage\r\n  useEffect(() => {\r\n    if (!initialized) return;\r\n    \r\n    try {\r\n      localStorage.setItem('cart', JSON.stringify(cart));\r\n    } catch (err) {\r\n      console.error('Error saving cart to localStorage:', err);\r\n    }\r\n  }, [cart, initialized]);\r\n\r\n  const addToCart = (item) => {\r\n    if (!item || !item.id) {\r\n      console.error('Invalid item added to cart:', item);\r\n      return;\r\n    }\r\n\r\n    setCart(prev => {\r\n      const existingItem = prev.find(i => i.id === item.id);\r\n      if (existingItem) {\r\n        return prev.map(i => \r\n          i.id === item.id \r\n            ? { ...i, quantity: (i.quantity || 0) + 1 }\r\n            : i\r\n        );\r\n      }\r\n      return [...prev, { ...item, quantity: 1 }];\r\n    });\r\n  };\r\n\r\n  const removeFromCart = (id) => {\r\n    if (!id) {\r\n      console.error('Invalid item ID for removal:', id);\r\n      return;\r\n    }\r\n\r\n    setCart(prev => prev.filter(item => item.id !== id));\r\n  };\r\n\r\n  const updateQuantity = (id, quantity) => {\r\n    if (!id || quantity < 1) {\r\n      console.error('Invalid quantity update:', { id, quantity });\r\n      return;\r\n    }\r\n\r\n    setCart(prev => \r\n      prev.map(item => \r\n        item.id === id \r\n          ? { ...item, quantity }\r\n          : item\r\n      )\r\n    );\r\n  };\r\n\r\n  const clearCart = () => {\r\n    setCart([]);\r\n  };\r\n\r\n  const value = {\r\n    cart,\r\n    loading,\r\n    error,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart\r\n  };\r\n\r\n  if (!initialized) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <CartContext.Provider value={value}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}