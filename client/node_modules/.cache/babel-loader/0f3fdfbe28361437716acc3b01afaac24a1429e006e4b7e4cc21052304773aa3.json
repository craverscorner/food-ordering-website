{"ast":null,"code":"var _jsxFileName = \"E:\\\\food-ordering-website\\\\client\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport function useCart() {\n  _s();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n_s(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function CartProvider({\n  children\n}) {\n  _s2();\n  const [cart, setCart] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load cart from Supabase when user is authenticated\n  useEffect(() => {\n    const loadCart = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (user) {\n          const {\n            data,\n            error\n          } = await supabase.from('carts').select('*').eq('user_id', user.id);\n          if (error) throw error;\n          // data is an array; use the first cart if it exists\n          const cartData = Array.isArray(data) && data.length > 0 ? data[0] : null;\n          setCart((cartData === null || cartData === void 0 ? void 0 : cartData.items) || []);\n        } else {\n          // If not authenticated, load from localStorage\n          const stored = localStorage.getItem('cart');\n          setCart(stored ? JSON.parse(stored) : []);\n        }\n      } catch (err) {\n        console.error('Error loading cart:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadCart();\n  }, []);\n\n  // Save cart to Supabase when authenticated, or localStorage when not\n  useEffect(() => {\n    const saveCart = async () => {\n      try {\n        const {\n          data: {\n            user\n          }\n        } = await supabase.auth.getUser();\n        if (user) {\n          const {\n            error\n          } = await supabase.from('carts').upsert({\n            user_id: user.id,\n            items: cart,\n            updated_at: new Date().toISOString()\n          }, {\n            onConflict: ['user_id']\n          });\n          if (error) throw error;\n        } else {\n          localStorage.setItem('cart', JSON.stringify(cart));\n        }\n      } catch (err) {\n        console.error('Error saving cart:', err);\n        setError(err.message);\n      }\n    };\n    if (!loading) {\n      saveCart();\n    }\n  }, [cart, loading]);\n  const addToCart = item => {\n    setCart(prev => {\n      const existingItem = prev.find(i => i.id === item.id);\n      if (existingItem) {\n        return prev.map(i => i.id === item.id ? {\n          ...i,\n          quantity: i.quantity + 1\n        } : i);\n      }\n      return [...prev, {\n        ...item,\n        quantity: 1\n      }];\n    });\n  };\n  const removeFromCart = id => {\n    setCart(prev => prev.filter(item => item.id !== id));\n  };\n  const updateQuantity = (id, quantity) => {\n    if (quantity < 1) return;\n    setCart(prev => prev.map(item => item.id === id ? {\n      ...item,\n      quantity\n    } : item));\n  };\n  const clearCart = () => {\n    setCart([]);\n  };\n  const value = {\n    cart,\n    loading,\n    error,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_s2(CartProvider, \"2YKKtVALI5a7ck9lvGCzbzvGh+o=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","CartContext","useCart","_s","context","Error","CartProvider","children","_s2","cart","setCart","loading","setLoading","error","setError","loadCart","data","user","auth","getUser","from","select","eq","id","cartData","Array","isArray","length","items","stored","localStorage","getItem","JSON","parse","err","console","message","saveCart","upsert","user_id","updated_at","Date","toISOString","onConflict","setItem","stringify","addToCart","item","prev","existingItem","find","i","map","quantity","removeFromCart","filter","updateQuantity","clearCart","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/food-ordering-website/client/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { supabase } from '../supabaseClient';\r\n\r\nconst CartContext = createContext();\r\n\r\nexport function useCart() {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function CartProvider({ children }) {\r\n  const [cart, setCart] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Load cart from Supabase when user is authenticated\r\n  useEffect(() => {\r\n    const loadCart = async () => {\r\n      try {\r\n        const { data: { user } } = await supabase.auth.getUser();\r\n        if (user) {\r\n          const { data, error } = await supabase\r\n            .from('carts')\r\n            .select('*')\r\n            .eq('user_id', user.id);\r\n          if (error) throw error;\r\n          // data is an array; use the first cart if it exists\r\n          const cartData = Array.isArray(data) && data.length > 0 ? data[0] : null;\r\n          setCart(cartData?.items || []);\r\n        } else {\r\n          // If not authenticated, load from localStorage\r\n          const stored = localStorage.getItem('cart');\r\n          setCart(stored ? JSON.parse(stored) : []);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error loading cart:', err);\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadCart();\r\n  }, []);\r\n\r\n  // Save cart to Supabase when authenticated, or localStorage when not\r\n  useEffect(() => {\r\n    const saveCart = async () => {\r\n      try {\r\n        const { data: { user } } = await supabase.auth.getUser();\r\n        if (user) {\r\n          const { error } = await supabase\r\n            .from('carts')\r\n            .upsert(\r\n              {\r\n                user_id: user.id,\r\n                items: cart,\r\n                updated_at: new Date().toISOString()\r\n              },\r\n              { onConflict: ['user_id'] }\r\n            );\r\n          if (error) throw error;\r\n        } else {\r\n          localStorage.setItem('cart', JSON.stringify(cart));\r\n        }\r\n      } catch (err) {\r\n        console.error('Error saving cart:', err);\r\n        setError(err.message);\r\n      }\r\n    };\r\n\r\n    if (!loading) {\r\n      saveCart();\r\n    }\r\n  }, [cart, loading]);\r\n\r\n  const addToCart = (item) => {\r\n    setCart(prev => {\r\n      const existingItem = prev.find(i => i.id === item.id);\r\n      if (existingItem) {\r\n        return prev.map(i => \r\n          i.id === item.id \r\n            ? { ...i, quantity: i.quantity + 1 }\r\n            : i\r\n        );\r\n      }\r\n      return [...prev, { ...item, quantity: 1 }];\r\n    });\r\n  };\r\n\r\n  const removeFromCart = (id) => {\r\n    setCart(prev => prev.filter(item => item.id !== id));\r\n  };\r\n\r\n  const updateQuantity = (id, quantity) => {\r\n    if (quantity < 1) return;\r\n    setCart(prev => \r\n      prev.map(item => \r\n        item.id === id \r\n          ? { ...item, quantity }\r\n          : item\r\n      )\r\n    );\r\n  };\r\n\r\n  const clearCart = () => {\r\n    setCart([]);\r\n  };\r\n\r\n  const value = {\r\n    cart,\r\n    loading,\r\n    error,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={value}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}